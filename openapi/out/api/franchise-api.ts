/* tslint:disable */
/* eslint-disable */
/**
 * Gym service
 * Gym service api document
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddFranchiseRequest } from '../model';
// @ts-ignore
import { GetFranchise } from '../model';
// @ts-ignore
import { GetFranchiseList } from '../model';
// @ts-ignore
import { UpdateFranchiseRequest } from '../model';
/**
 * FranchiseApi - axios parameter creator
 * @export
 */
export const FranchiseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddFranchiseRequest} [addFranchiseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFranchise: async (addFranchiseRequest?: AddFranchiseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/franchise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addFranchiseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} franchiseId id of the franchise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFranchise: async (franchiseId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'franchiseId' is not null or undefined
            assertParamExists('deleteFranchise', 'franchiseId', franchiseId)
            const localVarPath = `/api/franchise/{franchiseId}`
                .replace(`{${"franchiseId"}}`, encodeURIComponent(String(franchiseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} franchiseId id if the franchise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFranchise: async (franchiseId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'franchiseId' is not null or undefined
            assertParamExists('getFranchise', 'franchiseId', franchiseId)
            const localVarPath = `/api/franchise/{franchiseId}`
                .replace(`{${"franchiseId"}}`, encodeURIComponent(String(franchiseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFranchiseList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/franchise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} franchiseId id of the franchise
         * @param {UpdateFranchiseRequest} [updateFranchiseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFranchise: async (franchiseId: number, updateFranchiseRequest?: UpdateFranchiseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'franchiseId' is not null or undefined
            assertParamExists('updateFranchise', 'franchiseId', franchiseId)
            const localVarPath = `/api/franchise/{franchiseId}`
                .replace(`{${"franchiseId"}}`, encodeURIComponent(String(franchiseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFranchiseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FranchiseApi - functional programming interface
 * @export
 */
export const FranchiseApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FranchiseApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddFranchiseRequest} [addFranchiseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFranchise(addFranchiseRequest?: AddFranchiseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFranchise(addFranchiseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} franchiseId id of the franchise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFranchise(franchiseId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFranchise(franchiseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} franchiseId id if the franchise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFranchise(franchiseId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFranchise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFranchise(franchiseId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFranchiseList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFranchiseList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFranchiseList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} franchiseId id of the franchise
         * @param {UpdateFranchiseRequest} [updateFranchiseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFranchise(franchiseId: number, updateFranchiseRequest?: UpdateFranchiseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFranchise(franchiseId, updateFranchiseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FranchiseApi - factory interface
 * @export
 */
export const FranchiseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FranchiseApiFp(configuration)
    return {
        /**
         * 
         * @param {AddFranchiseRequest} [addFranchiseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFranchise(addFranchiseRequest?: AddFranchiseRequest, options?: any): AxiosPromise<object> {
            return localVarFp.addFranchise(addFranchiseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} franchiseId id of the franchise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFranchise(franchiseId: number, options?: any): AxiosPromise<object> {
            return localVarFp.deleteFranchise(franchiseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} franchiseId id if the franchise
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFranchise(franchiseId: number, options?: any): AxiosPromise<GetFranchise> {
            return localVarFp.getFranchise(franchiseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFranchiseList(options?: any): AxiosPromise<GetFranchiseList> {
            return localVarFp.getFranchiseList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} franchiseId id of the franchise
         * @param {UpdateFranchiseRequest} [updateFranchiseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFranchise(franchiseId: number, updateFranchiseRequest?: UpdateFranchiseRequest, options?: any): AxiosPromise<object> {
            return localVarFp.updateFranchise(franchiseId, updateFranchiseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FranchiseApi - object-oriented interface
 * @export
 * @class FranchiseApi
 * @extends {BaseAPI}
 */
export class FranchiseApi extends BaseAPI {
    /**
     * 
     * @param {AddFranchiseRequest} [addFranchiseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FranchiseApi
     */
    public addFranchise(addFranchiseRequest?: AddFranchiseRequest, options?: AxiosRequestConfig) {
        return FranchiseApiFp(this.configuration).addFranchise(addFranchiseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} franchiseId id of the franchise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FranchiseApi
     */
    public deleteFranchise(franchiseId: number, options?: AxiosRequestConfig) {
        return FranchiseApiFp(this.configuration).deleteFranchise(franchiseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} franchiseId id if the franchise
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FranchiseApi
     */
    public getFranchise(franchiseId: number, options?: AxiosRequestConfig) {
        return FranchiseApiFp(this.configuration).getFranchise(franchiseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FranchiseApi
     */
    public getFranchiseList(options?: AxiosRequestConfig) {
        return FranchiseApiFp(this.configuration).getFranchiseList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} franchiseId id of the franchise
     * @param {UpdateFranchiseRequest} [updateFranchiseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FranchiseApi
     */
    public updateFranchise(franchiseId: number, updateFranchiseRequest?: UpdateFranchiseRequest, options?: AxiosRequestConfig) {
        return FranchiseApiFp(this.configuration).updateFranchise(franchiseId, updateFranchiseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
