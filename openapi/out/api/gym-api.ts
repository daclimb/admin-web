/* tslint:disable */
/* eslint-disable */
/**
 * Gym service
 * Gym service api document
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddGymRequest } from '../model';
// @ts-ignore
import { AddGymResponse } from '../model';
// @ts-ignore
import { AddImageResponse } from '../model';
// @ts-ignore
import { GetGymListResponse } from '../model';
// @ts-ignore
import { GetGymResponse } from '../model';
// @ts-ignore
import { UpdateGymRequest } from '../model';
/**
 * GymApi - axios parameter creator
 * @export
 */
export const GymApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/gym/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddGymRequest} [addGymRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGym: async (addGymRequest?: AddGymRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/gym`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addGymRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} gymId Id of the gym
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGym: async (gymId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gymId' is not null or undefined
            assertParamExists('getGym', 'gymId', gymId)
            const localVarPath = `/api/gym/{gymId}`
                .replace(`{${"gymId"}}`, encodeURIComponent(String(gymId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGymList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/gym`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} gymId id of the gym
         * @param {UpdateGymRequest} [updateGymRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGym: async (gymId: number, updateGymRequest?: UpdateGymRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gymId' is not null or undefined
            assertParamExists('updateGym', 'gymId', gymId)
            const localVarPath = `/api/gym/{gymId}`
                .replace(`{${"gymId"}}`, encodeURIComponent(String(gymId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=UTF-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGymRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GymApi - functional programming interface
 * @export
 */
export const GymApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GymApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async add(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddImageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.add(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddGymRequest} [addGymRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGym(addGymRequest?: AddGymRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddGymResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addGym(addGymRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} gymId Id of the gym
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGym(gymId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGymResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGym(gymId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGymList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGymListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGymList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} gymId id of the gym
         * @param {UpdateGymRequest} [updateGymRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGym(gymId: number, updateGymRequest?: UpdateGymRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGym(gymId, updateGymRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GymApi - factory interface
 * @export
 */
export const GymApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GymApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(options?: any): AxiosPromise<AddImageResponse> {
            return localVarFp.add(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddGymRequest} [addGymRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGym(addGymRequest?: AddGymRequest, options?: any): AxiosPromise<AddGymResponse> {
            return localVarFp.addGym(addGymRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} gymId Id of the gym
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGym(gymId: number, options?: any): AxiosPromise<GetGymResponse> {
            return localVarFp.getGym(gymId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGymList(options?: any): AxiosPromise<GetGymListResponse> {
            return localVarFp.getGymList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} gymId id of the gym
         * @param {UpdateGymRequest} [updateGymRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGym(gymId: number, updateGymRequest?: UpdateGymRequest, options?: any): AxiosPromise<object> {
            return localVarFp.updateGym(gymId, updateGymRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GymApi - object-oriented interface
 * @export
 * @class GymApi
 * @extends {BaseAPI}
 */
export class GymApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GymApi
     */
    public add(options?: AxiosRequestConfig) {
        return GymApiFp(this.configuration).add(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddGymRequest} [addGymRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GymApi
     */
    public addGym(addGymRequest?: AddGymRequest, options?: AxiosRequestConfig) {
        return GymApiFp(this.configuration).addGym(addGymRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} gymId Id of the gym
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GymApi
     */
    public getGym(gymId: number, options?: AxiosRequestConfig) {
        return GymApiFp(this.configuration).getGym(gymId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GymApi
     */
    public getGymList(options?: AxiosRequestConfig) {
        return GymApiFp(this.configuration).getGymList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} gymId id of the gym
     * @param {UpdateGymRequest} [updateGymRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GymApi
     */
    public updateGym(gymId: number, updateGymRequest?: UpdateGymRequest, options?: AxiosRequestConfig) {
        return GymApiFp(this.configuration).updateGym(gymId, updateGymRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
